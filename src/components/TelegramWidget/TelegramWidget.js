import { useEffect, useState } from 'react';
import styles from './TelegramWidget.module.css';
import { signin, signup } from '@@/utils/api';
import { useRouter } from 'next/router';
import Cookies from 'js-cookie';
import { sendTelegramNotification } from '@@/utils/telegram';

const TelegramWidget = ({ isRegistration = false }) => {
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const trackSuccessfulRegistration = (userId) => {
    if (typeof window !== 'undefined') {
      try {
        // Yandex.Metrika
        if (window.ym) {
          window.ym(99937024, 'reachGoal', 'confirm_reg');
        } else {

        }
        
        // VK Pixel
        if (window._tmr) {
          window._tmr.push({ 
            type: 'reachGoal', 
            id: 3628641, 
            goal: 'registration_success'
          });
        } else {

        }

        // Send success notification
        sendTelegramNotification(
          `üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ Telegram!\nID: ${userId}\nVK Pixel: ‚úÖ\n–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞: ‚úÖ`
        );
      } catch (analyticsError) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        const errorDetails = {
          vkPixel: window._tmr ? '‚úÖ' : '‚ùå',
          yandex: window.ym ? '‚úÖ' : '‚ùå',
          error: analyticsError.message
        };
        
        sendTelegramNotification(
          `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (Telegram)\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}\n–û—à–∏–±–∫–∞: ${analyticsError.message}\nVK Pixel: ${errorDetails.vkPixel}\n–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞: ${errorDetails.yandex}`
        );
      }
    }
  };

  const handleTelegramAuth = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram Login
      if (!window.Telegram || !window.Telegram.Login) {
        setError('Telegram Login –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Login
      window.Telegram.Login.auth(
        { bot_id: process.env.NEXT_PUBLIC_TELEGRAM_BOT_ID },
        async (data) => {
          if (data) {
            try {
              // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
              const authData = {
                provider: 'telegram',
                socialData: JSON.stringify(data)
              };

              // –ò—Å–ø–æ–ª—å–∑—É–µ–º signin –∏–ª–∏ signup –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
              const result = isRegistration 
                ? await signup(authData)
                : await signin(authData);

              if (result?.accessToken && result?.refreshToken) {
                Cookies.set('accessToken', result.accessToken, { secure: true, sameSite: 'Strict', expires: 30 });
                Cookies.set('refreshToken', result.refreshToken, { secure: true, sameSite: 'Strict', expires: 30 });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if (isRegistration && result?.user?.id) {
                  trackSuccessfulRegistration(result.user.id);
                }
                
                window.location.href = '/profile';
              } else {
                setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
              }
            } catch (error) {
              setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
          } else {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram');
          }
          setLoading(false);
        }
      );
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      setLoading(false);
    }
  };

  return (
    <div className={styles.telegramWidgetContainer}>
      <button
        onClick={handleTelegramAuth}
        disabled={loading}
        className={styles.telegramButton}
      >
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'}
      </button>
      {error && <div className={styles.error}>{error}</div>}
    </div>
  );
};

export default TelegramWidget; 
